from selenium import webdriver
import sys
import time
import os
import pyautogui
import webbrowser
import openpyxl
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.webdriver.support.select import Select
from openpyxl import Workbook
from openpyxl import load_workbook
from openpyxl.worksheet.cell_range import CellRange
import tkinter
from tkinter import *
from tkinter import messagebox, Label, Button, FALSE, Tk, Entry
from datetime import date
from datetime import datetime

chrome_path= ".\\chromedriver.exe"
driver = webdriver.Chrome(chrome_path)
driver.get("url")
        
def reporte(driver):
  
    elem = driver.find_element_by_xpath("""//*[@id="Email"]""")
    elem.send_keys("user")
    elem2 = driver.find_element_by_xpath("""//*[@id="Password"]""")
    elem2.send_keys("password")
    driver.find_element_by_xpath("""/html/body/div/div/div/div/div/div/form/div[5]/div/button""").click()
    time.sleep(2)
    driver.find_element_by_xpath("""//*[@id="tablaDivisiones"]/tbody/tr[1]/td""").click()
    time.sleep(2)
    driver.find_element_by_xpath("""//*[@id="reportes"]/a""").click()
    time.sleep(2)
    driver.find_element_by_xpath("""//*[@id="3"]/td[3]/a""").click()

def inicio():
    try:
        path_reporte = r"\546.xlsx"
        os.remove(path_reporte)
        print("File removed. Opening chromedriver in 3 seconds...")
        time.sleep(3)
    except FileNotFoundError:
        print("File doesn´t exist or wrong filepath. Opening chromedriver in 2 seconds...")
        time.sleep(2)
        pass
   
def excelchange():

    file = '\\546.xlsx'
    wb = openpyxl.load_workbook(file)
    ws = wb['Consumo_Energetico']
    ws1 = wb['Gasto_Energetico']
    ws.unmerge_cells('b2:f2')
    ws.unmerge_cells('b4:f4')
    ws.delete_rows(1, 7)
    ws.delete_cols(1, 3)
    ws.delete_cols(2, 2)
    ws.delete_cols(3, 2)
    ws.delete_cols(3, 36)
    ws.delete_cols(15, 4)

    for row in ws.iter_rows():
        if row[1].value == 'Total consumo':
            ws.delete_rows(row[1].row)
            
    ws.insert_cols(1)
    ws.insert_cols(1)
    ws.insert_cols(1)
    ws.insert_cols(1)
    ws.insert_cols(1)
    ws.insert_cols(8)
    #Encabezado de columnas
    ws['A1'] = 'Año'
    ws['B1'] = 'Mes'
    ws['C1'] = 'Nro_Cliente'
    ws['D1'] = 'Nro_Medidor'
    ws['E1'] = 'id_Edificio'
    ws['F1'] = 'id_Unidad'
    ws['G1'] = 'Tipo_Consumo'
    ws['H1'] = 'ID_Tipo_Consumo'
    ws['I1'] = 'Cantidad'
    ws['J1'] = 'Monto'

    max_row_for_f = max((f.row for f in ws['F'] if f.value is not None))

    for row in ws.iter_rows(min_row=2, max_row=max_row_for_f ):
            ws.cell(row=row[0].row, column=1).value = 2020
            ws.cell(row=row[0].row, column=2).value = 1
            ws.cell(row=row[0].row, column=3).value = -1
            ws.cell(row=row[0].row, column=4).value = -1
            ws.cell(row=row[0].row, column=5).value = -1

    for row in ws.iter_rows():
        if row[6].value == 'Electricidad':
            ws.cell(row=row[0].row, column=8).value = 1
    for row in ws.iter_rows():
        if row[6].value == 'Gas Licuado de Petróleo':
            ws.cell(row=row[0].row, column=8).value = 2
    for row in ws.iter_rows():
        if row[6].value == 'Gas Natural':
            ws.cell(row=row[0].row, column=8).value = 3
    
    foo = ('J','K','L','M','N','O','P','Q','R','S','T')
    bar = (-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11)
    celd = (2,3,4,5,6,7,8,9,10,11,12)

    for f, b, c in zip(foo, bar, celd):
        max_row_for_i = max((i.row for i in ws['I'] if i.value is not None))
        max_row_for_a = max((a.row for a in ws['A'] if a.value is not None))
        max_row_for_g = max((g.row for g in ws['G'] if g.value is not None))
        ws.move_range((f+str("2")+str(":")+f+str(max_row_for_g)), rows=max_row_for_i -1, cols=b)
        max_row_for_i2 = max((i.row for i in ws['I'] if i.value is not None))
        for row in ws.iter_rows(min_row=max_row_for_a+1, max_row=max_row_for_i2 ):
            ws.cell(row=row[0].row, column=1).value = 2020
            ws.cell(row=row[0].row, column=2).value = c
            ws.cell(row=row[0].row, column=3).value = -1
            ws.cell(row=row[0].row, column=4).value = -1
            ws.cell(row=row[0].row, column=5).value = -1
            

    ws1 = wb['Gasto_Energetico']
    ws1.unmerge_cells('b2:f2')
    ws1.unmerge_cells('b4:f4')
    ws1.delete_rows(1, 7)
    ws1.delete_cols(1, 3)
    ws1.delete_cols(2, 2)
    ws1.delete_cols(3, 2)
    ws1.delete_cols(3, 36)
    ws1.delete_cols(15, 4)

    for row in ws1.iter_rows():
        if row[1].value == 'Total gasto':
            ws1.delete_rows(row[1].row)


    def copyRange(startCol, startRow, endCol, endRow, sheet):
        rangeSelected = []
        
        for i in range(startRow,endRow + 1,1):
            
            rowSelected = []
            for j in range(startCol,endCol+1,1):
                rowSelected.append(sheet.cell(row = i, column = j).value)
            
            rangeSelected.append(rowSelected)
    
        return rangeSelected
            
    
    def pasteRange(startCol, startRow, endCol, endRow, sheetReceiving,copiedData):
        countRow = 0
        for i in range(startRow,endRow+1,1):
            countCol = 0
            for j in range(startCol,endCol+1,1):
                sheetReceiving.cell(row = i, column = j).value = copiedData[countRow][countCol]
                countCol += 1
            countRow += 1

    def movergasto():
        #startCol, startRow, endCol, endRow
        selectedRange = copyRange(3,1,15,57,ws1) 
        pastingRange = pasteRange(10,1,21,57,ws,selectedRange) 
        
    def ejemplo():
        for x in range(1,12):
            max_row_for_f1 = max((f.row for f in ws['F'] if f.value is not None))
            selectedRange1 = copyRange(1,2,2,57,ws1) 
            pastingRange1 = pasteRange(6,max_row_for_f1+1,7,max_row_for_f1+56,ws,selectedRange1)
    
    movergasto()
    ejemplo()

    foo1 = ('K','L','M','N','O','P','Q','R','S','T','U')
    bar1 = (-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11)
    for f1, b1  in zip(foo1, bar1):
        max_row_for_j = max((j.row for j in ws['J'] if j.value is not None))
        max_row_for_h = max((h.row for h in ws['H'] if h.value is not None))
        ws.move_range((f1+str("2")+str(":")+f1+str(max_row_for_h)), rows=max_row_for_j -1, cols=b1)
        
    for row in ws.iter_rows():
        if row[6].value == 'Electricidad':
            ws.cell(row=row[0].row, column=8).value = 1
    for row in ws.iter_rows():
        if row[6].value == 'Gas Licuado de Petróleo':
            ws.cell(row=row[0].row, column=8).value = 2
    for row in ws.iter_rows():
        if row[6].value == 'Gas Natural':
            ws.cell(row=row[0].row, column=8).value = 3

    ws['J1'] = 'Monto'
    ws.delete_cols(11, 21)
    del wb['Gasto_Energetico']

    no_fill = openpyxl.styles.PatternFill(fill_type=None)
    side = openpyxl.styles.Side(border_style=None)
    no_border = openpyxl.styles.borders.Border(
        left=side, 
        right=side, 
        top=side, 
        bottom=side,
    )
    for row in ws.iter_rows():
        for cell in row:
            cell.fill = no_fill
            cell.border = no_border

    wb.save("outputconsumo.xlsx")
    wb.close
    print("Success file transformation...")

inicio()
while True:

    try:
        reporte(driver)
        time.sleep(3)
        print("Closing driver...")
        driver.close()
        driver.quit()
        print("File download successful ... Running the file transformation process in 3 seconds...")
        time.sleep(3)
        break

    except:
        print("Don't possible function execution. Trying on 15 seconds...")
        time.sleep(15)
        pass
time.sleep(4)
excelchange()
print("Robot's process complete without errors...")

def log():
    with open("Log_consumo.txt", "a+") as file_object:
        # Move read cursor to the start of file.
        file_object.seek(0)
        # If file is not empty then append '\n'
        data = file_object.read(100)
        if len(data) > 0 :
            file_object.write("\n")
        # Append text at the end of file
        now = datetime.now()
        dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
        file_object.write("Proceso ejecutado con éxito: "+ dt_string)

def ventana():

    def openoutput():
        path_output = r"outputconsumo.xlsx"
        os.popen(path_output)

    
    def openlog():
        path_output = r"\Log_consumo.txt"
        os.popen(path_output)


    def close_window(): 
        window.destroy()
           
    window = Tk()
    window.resizable(width=FALSE, height=FALSE)
    window.title("Consumo energético TGR")
    window.geometry("350x100")
    #Usuario y contraseña, cajas
    username_text = Label(window, text="Proceso ejecutado con éxito...")
    username_text.place(x = 40,y = 50)
    boton1 = Button(window, text = "Archivo de salida", command = openoutput)
    boton1.place(x = 10,y = 30)
    boton2 = Button(window, text = "Log de ejecución", command = openlog)
    boton2.place(x = 140,y = 30)
    boton3 = Button(window, text = "   Cerrar   ", command = close_window)
    boton3.place(x = 270,y = 30)
    username_text.pack()
    #ventana principal
    window.mainloop()

log()
ventana()
